n
n
me2
n
n
n
n
spg(ba, tryscorealphasum, gr = NULL, method = 3, 
        lower = c(0.1, -Inf), upper = Inf, project = NULL, projectArgs = NULL, 
        control = list(), quiet = FALSE, bb, data, A, a, bg, 
        c, t)$
spg(ba, tryscorealphasum, gr = NULL, method = 3, 
        lower = c(0.1, -Inf), upper = Inf, project = NULL, projectArgs = NULL, 
        control = list(), quiet = FALSE, bb, data, A, a, bg, 
        c, t)
ba <- c(0.1, 0.1)
spg(ba, tryscorealphasum, gr = NULL, method = 3, 
        lower = c(0.1, -Inf), upper = Inf, project = NULL, projectArgs = NULL, 
        control = list(), quiet = FALSE, bb, data, A, a, bg, 
        c, t)
Q
undebug(fmb)
ba
mb
mba
mA
mba
Q
mba
plot(mba1[, 1] ~ data[, 2])
plot(mba[, 1] ~ data[, 2])
plot(mba[, 2] ~ data[, 2])
range(mba)
range(mba[, 2])
data[, 2]
range(data[, 2])
mb
mba
mba
plot(mba[, 2] ~ data[, 2])
plot(mba[, 1] ~ data[, 2])
mba
plot(mba[, 1] ~ data[, 2])
plot(mba[, 2] ~ data[, 2])
p
mbeta <- do.call(rbind, lapply(1 :n, fmbeta, data, bb, A, a, bg, c))
Q
me1
str(me1)
bg
ba
Q
debug(scorebeta)
n
n
n
n
n
n
n
n
n
n
n
n
d
Q
mbeta <- do.call(rbind, lapply(1 :n, fmbeta, data, bb, A, a, bg, c))
debug(fmbeta)
n
n
n
data
c
gete1
mbeta
debug(fmbeta)
em1
me1
undebug(fmbeta)
mbeta
Q
mbeta
mbeta
mbeta
mbeta
bb
bb
mt
mt
mba<- do.call(rbind, lapply(1 :lmt, fmb, mt, bb, A, a, bg, c))
bb
b <- 0.5
mt
bb
bb <- 0.5
bb
debug(fmb)
n
n
t
n
me2
n
n
t
n
t
n
me2
Q
undbug(fmb)
undebug(fmb)
mba
omba <- mba
for(itr in 1:100){
mba<- do.call(rbind, lapply(1 :lmt, fmb, mt, bb, A, a, bg, c))

A<- approxfun(mt, mba[, 1], rule = 2)
a <- approxfun(mt, mba[, 2], rule = 2)
if(sum(abs(mba[, 1] - omba[, 1])) / lmt <= 1e-3){
    break
}
omba <- mba
}
mba
debug(fmb)
mba<- do.call(rbind, lapply(1 :lmt, fmb, mt, bb, A, a, bg, c))
n
n
A(t)
n
bb
bg
t
A
a
undebug(fmb)
c
Q
q()
y
library(pracma)
args(integral)
Q
q()
n
i <- 1
q()
y
