n
n
n
n
x %*% bb
n
n
n
n
debug(fA2)
undebug(scorealpha)
n
n
n
expbbx
bg
c
n
n
debug(integrand)
n
n
debug(integrand)
n
n
n
n
ij
n
n
n
mu
n
expbgbbx
bg
A(s)
s
Q
mij
mij[1]
mij[1, ]
mij[2, ]
debug(fA2)
n
n
n
n
n
n
n
n
n
ij
debug(A2)
n
n
i
n
i
n
j
integrate(integrand, 0, tau, i, j)$value
n
n
n
mA2
ij <- mij[1, ]
 mA2[ij[1], ij[2]]
str(ij)
str(mij)
 mA2[ij[1], ij[2]]
ij <- mij[1, ]
 mA2[ij[1], ij[2]]
Q
c
c
undebug(fA2)
library(MASS)
debug(scorealpha)
scorealphasum(ba, bb, data, A, a, bg, c, t)
n
n
n
n
n
n
n
n
n
n
n
n
n
str(A2)
n
str(b2)
e2
sumexpc
a
e2
Q
debug(scorealpha)
n
n
n
n
n
n
n
n
n
n
n
n
n
A2
n
b2
ginv(t(A2) %*% A2)
n
e2
(t(A2) %*% t(b2))
b2
A2
range(A2)
bg
Q
bg
c
bg
c
c
rg
y
quantile(y)
c
bg
c
c
undebug(scorealpha)
debug(fA2)
n
n
n
n
n
n
res
n
debug(A2)
n
n
n
tau
debug(integrand)
n
n
n
n
n
n
n
n
n
n
mA
mA2
c
c
Q
i
j
bg
debug(integrand)
FUN
debug(FUN)
n
n
n
n
n
n
debug(integrand)
debug(vintegrand)
n
n
n
n
n
FUN
debug(integrand)
do.call("mapply", c(FUN = integrand, args[dovec], MoreArgs = list(args[!dovec]), 
    SIMPLIFY = SIMPLIFY, USE.NAMES = USE.NAMES))
args
sapply(args$s, integrand, args$i, args$j)
n
n
sapply(args$s, integrand, args$i, args$j)
expbbx
n
n
mu
n
A
s
x
Q
debug(fA2)
n
n
n
expbbx
x
debug(vintegrand)
n
n
debug(vintegrand)
n
n
n
n
n
c
n
n
n
n
n
n
n
n
debug(integrand)
debug(integrand)
x
expbbx
expbbx <- exp(x[1] * 0.5)
undebug(integrand)
sapply(args$s, integrand, args$i, args$j)
x <- x[1]
sapply(args$s, integrand, args$i, args$j)
debug(integrand)
sapply(args$s, integrand, args$i, args$j)
n
x
n
n
bg
n
bg
sapply(args$s, integrand, args$i, args$j)
n
n
n
expbgbbx
n
sumexpc
sapply(args$s, integrand, args$i, args$j)
n
n
n
exp(bg * A(s) * x %*% bb) * c
c
sapply(args$s, integrand, args$i, args$j)
exp(bg * A(s) * x %*% bb)
sum(exp(bg * A(s) * x %*% bb) * c)
n
n
mu
n
n
n
sumexprc
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
c
Q
c
c
c
Q
undebug(fA2)
bg
bg
c
bg
y
library(BB)
ba
sqrt(0.83)
dfsane(ba,scorealphasum, method = 2, control = list(), quiet = FALSE, bb, data, A, a, bg, c, t)
scorealphasum(c(0.8396348, 1.3439936), bb, data, A, a, bg, c, t)
traceback()
temp <-  dfsane(ba,tryscorealphasum, method = 2, control = list(), quiet = FALSE, bb, data, A, a, bg, c, t)
temp
tryscorealphasum(c(45, 31), bb, data, A, a, bg, c, t)
debug(scoreaplphasum)
debug(scorealphasum)
tryscorealphasum(c(45, 31), bb, data, A, a, bg, c, t)
n
n
n
apply(data, 1, scorealpha, ba, bb, A, a, bg, c, t)
debug(scorealpha)
apply(data, 1, scorealpha, ba, bb, A, a, bg, c, t)
n
n
n
n
x
n
n
Aexpbbx
ba[1]
expbbx
ba
ba^2
45^2
Q
undebug(scorealpha)
undebug(scorealphasum)
Q
me2
str(me2)
warnings()
args(scoreaplpha)
args(scorealpha)
res
Q
h <- bw.nrd(data[, 1]) * n^{-1/15}
h
 bw.nrd(data[, 1])
data
h 
mba
A
mba
mba
plot(mba~data[, 2])
plot(mba[, 1]~data[, 2])
data[, 3]
debug(gete2)
n
n
x
n
n
n
e2
n
n
n
n
t(ginv(t(A2) %*% A2) %*% (t(A2) %*% t(b2)))
n
n
n
n
n
t(ginv(t(A2) %*% A2) %*% (t(A2) %*% t(b2)))
c
Q
undebug(gete2)
debug(fmb)
n
n
n
me2
n
n
n
n
spg(ba, tryscorealphasum, gr = NULL, method = 3, 
        lower = c(0.1, -Inf), upper = Inf, project = NULL, projectArgs = NULL, 
        control = list(), quiet = FALSE, bb, data, A, a, bg, 
        c, t)$
spg(ba, tryscorealphasum, gr = NULL, method = 3, 
        lower = c(0.1, -Inf), upper = Inf, project = NULL, projectArgs = NULL, 
        control = list(), quiet = FALSE, bb, data, A, a, bg, 
        c, t)
ba <- c(0.1, 0.1)
spg(ba, tryscorealphasum, gr = NULL, method = 3, 
        lower = c(0.1, -Inf), upper = Inf, project = NULL, projectArgs = NULL, 
        control = list(), quiet = FALSE, bb, data, A, a, bg, 
        c, t)
Q
undebug(fmb)
ba
mb
mba
mA
mba
Q
mba
plot(mba1[, 1] ~ data[, 2])
plot(mba[, 1] ~ data[, 2])
plot(mba[, 2] ~ data[, 2])
range(mba)
range(mba[, 2])
data[, 2]
range(data[, 2])
mb
mba
mba
plot(mba[, 2] ~ data[, 2])
plot(mba[, 1] ~ data[, 2])
mba
plot(mba[, 1] ~ data[, 2])
plot(mba[, 2] ~ data[, 2])
p
mbeta <- do.call(rbind, lapply(1 :n, fmbeta, data, bb, A, a, bg, c))
Q
me1
str(me1)
bg
ba
Q
debug(scorebeta)
n
n
n
n
n
n
n
n
n
n
n
n
d
Q
mbeta <- do.call(rbind, lapply(1 :n, fmbeta, data, bb, A, a, bg, c))
debug(fmbeta)
n
n
n
data
c
gete1
mbeta
debug(fmbeta)
em1
me1
undebug(fmbeta)
mbeta
Q
mbeta
mbeta
mbeta
mbeta
bb
bb
mt
mt
mba<- do.call(rbind, lapply(1 :lmt, fmb, mt, bb, A, a, bg, c))
bb
b <- 0.5
mt
bb
bb <- 0.5
bb
debug(fmb)
n
n
t
n
me2
n
n
t
n
t
n
me2
Q
undbug(fmb)
undebug(fmb)
mba
omba <- mba
for(itr in 1:100){
mba<- do.call(rbind, lapply(1 :lmt, fmb, mt, bb, A, a, bg, c))

A<- approxfun(mt, mba[, 1], rule = 2)
a <- approxfun(mt, mba[, 2], rule = 2)
if(sum(abs(mba[, 1] - omba[, 1])) / lmt <= 1e-3){
    break
}
omba <- mba
}
mba
debug(fmb)
mba<- do.call(rbind, lapply(1 :lmt, fmb, mt, bb, A, a, bg, c))
n
n
A(t)
n
bb
bg
t
A
a
undebug(fmb)
c
Q
q()
y
